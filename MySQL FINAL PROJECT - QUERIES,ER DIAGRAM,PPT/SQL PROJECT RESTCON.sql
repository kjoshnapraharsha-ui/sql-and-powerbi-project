CREATE DATABASE RESTAURANTCONSUMER;
USE RESTAURANTCONSUMER;



CREATE TABLE CONSUMERS (
CONSUMER_ID VARCHAR(10) PRIMARY KEY,
CITY VARCHAR(255),
STATE VARCHAR(255),
COUNTRY VARCHAR(255),
LATITUDE DECIMAL(10,7),
LONGITUDE DECIMAL(10,7),
SMOKER VARCHAR(10),
DRINK_LEVEL VARCHAR(50),
TRANSPORTATION_METHOD VARCHAR(50),
MARITAL_STATUS VARCHAR(20),
CHILDREN VARCHAR(20),
AGE INT ,
OCCUPATION VARCHAR(50),
BUDGET VARCHAR(10) 
);

CREATE TABLE CONSUMER_PREFERENCES (
CONSUMER_ID VARCHAR(10),
PREFERRED_CUISINE VARCHAR(255),
PRIMARY KEY (CONSUMER_ID, PREFERRED_CUISINE),
FOREIGN KEY (CONSUMER_ID) REFERENCES CONSUMERS(CONSUMER_ID) ON DELETE CASCADE
);

CREATE TABLE RESTAURANTS (
RESTAURANT_ID INT PRIMARY KEY,
NAME  VARCHAR(255),
CITY VARCHAR(255),
STATE VARCHAR (255),
COUNTRY VARCHAR(255),
ZIP_CODE VARCHAR(10),
LATITUDE DECIMAL(10,8),
LONGITUDE DECIMAL(11,8),
ALCOHOL_SERVICE VARCHAR(50),
SMOKING_ALLOWED VARCHAR(50) ,
PRICE VARCHAR(10),
FRANCHISE VARCHAR(5),
AREA VARCHAR(10),
PARKING VARCHAR (50)
);

CREATE TABLE RESTAURANT_CUISINES (
RESTAURANT_ID INT,
CUISINE VARCHAR(255),
PRIMARY KEY (RESTAURANT_ID, CUISINE),
FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANTS(RESTAURANT_ID) ON DELETE CASCADE
);

CREATE TABLE RATINGS(
CONSUMER_ID VARCHAR(10),
RESTAURANT_ID INT,
OVERALL_RATING INT,
FOOD_RATING INT,
SERVICE_RATING INT,
PRIMARY KEY (CONSUMER_ID, RESTAURANT_ID),
FOREIGN KEY (CONSUMER_ID) REFERENCES CONSUMERS(CONSUMER_ID) ON DELETE CASCADE,
FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANTS(RESTAURANT_ID) ON DELETE CASCADE 
);

SELECT * FROM CONSUMERS;
SELECT * FROM CONSUMER_PREFERENCES;
SELECT * FROM RESTAURANTS;
SELECT * FROM RESTAURANT_CUISINES;
SELECT * FROM RATINGS;

-- Using the WHERE clause to filter data based on specific criteria.

-- 1 List all details of consumers who live in the city of 'Cuernavaca'.
SELECT * FROM CONSUMERS WHERE CITY="CUERNAVACA";


-- 2 Find the Consumer_ID, Age, and Occupation of all consumers who are 'Students' AND are 'Smokers'.
SELECT CONSUMER_ID,AGE,OCCUPATION 
FROM CONSUMERS  
WHERE  OCCUPATION =  "STUDENT"AND SMOKER = "YES";


-- 3 List the Name, City, Alcohol_Service, and Price of all restaurants that serve 'Wine & Beer' and have a 'Medium' price level.
SELECT NAME,CITY,ALCOHOL_SERVICE,PRICE FROM RESTAURANTS WHERE ALCOHOL_SERVICE="WINE & BEER" AND PRICE = "MEDIUM";
-- 4 Find the names and cities of all restaurants that are part of a 'Franchise'.
SELECT NAME,CITY FROM RESTAURANTS WHERE "FRANCHISE"= "YES";



-- 5 Show the Consumer_ID, Restaurant_ID, and Overall_Rating for all ratings where the Overall_Rating was 'Highly Satisfactory' (which corresponds to a value of 2, according to the data dictionary).
SELECT CONSUMER_ID,RESTAURANT_ID,OVERALL_RATING FROM RATINGS WHERE OVERALL_RATING = 2;


-- Questions JOINs with Subqueries

-- 1 List the names and cities of all restaurants that have an Overall_Rating of 2 (Highly Satisfactory) from at least one consumer.
SELECT DISTINCT R. NAME ,R.CITY,RT.OVERALL_RATING
FROM RESTAURANTS R
JOIN RATINGS RT ON R. RESTAURANT_ID  = RT.RESTAURANT_ID
WHERE RT.OVERALL_RATING = 2;

-- 2 Find the Consumer_ID and Age of consumers who have rated restaurants located in ''San Luis Potosi'.
SELECT DISTINCT  C.CONSUMER_ID , C.AGE , R.CITY
FROM CONSUMERS C
JOIN RATINGS RT ON C. CONSUMER_ID =  RT.CONSUMER_ID
JOIN RESTAURANTS R ON RT.RESTAURANT_ID = R.RESTAURANT_ID
WHERE R.CITY = 'SAN LUIS POTOSI';


-- 3 List the names of restaurants that serve 'Mexican' cuisine and have been rated by consumer 'U1001'.
SELECT R.NAME, RT.CONSUMER_ID
FROM RESTAURANTS R
JOIN RATINGS RT ON R.RESTAURANT_ID= RT.RESTAURANT_ID
JOIN RESTAURANT_CUISINES RC ON RT.RESTAURANT_ID = RC.RESTAURANT_ID
WHERE RC.CUISINE="MEXICAN" AND RT.CONSUMER_ID="U1001";

-- 4 Find all details of consumers who prefer 'American' cuisine AND have a 'Medium' budget.
SELECT * 
FROM CONSUMERS C
JOIN CONSUMER_PREFERENCES CR ON C.CONSUMER_ID = CR.CONSUMER_ID
WHERE CR.PREFERRED_CUISINE = "AMERICAN" AND C.BUDGET = "MEDIUM";

-- 5 List restaurants (Name, City) that have received a Food_Rating lower than the average Food_Rating across all rated restaurants.
WITH AVGFOODRATING AS(
SELECT AVG(FOOD_RATING) AS AVGRATING
FROM RATINGS
)
SELECT R.NAME,R.CITY
FROM RESTAURANTS R
JOIN RATINGS RT ON R.RESTAURANT_ID = RT.RESTAURANT_ID
CROSS JOIN AVGFOODRATING
WHERE RT.FOOD_RATING < AVGFOODRATING.AVGRATING;


-- Find consumers (Consumer_ID, Age, Occupation) who have rated at least one restaurant but have NOT rated any restaurant that serves 'Italian' cuisine.
SELECT DISTINCT C.CONSUMER_ID,C.AGE,C.OCCUPATION 
FROM CONSUMERS C
JOIN RATINGS RT ON C.CONSUMER_ID = RT.CONSUMER_ID
WHERE C.CONSUMER_ID NOT IN (
SELECT CONSUMER_ID RT
FROM RATINGS RT
JOIN  RESTAURANT_CUISINES R ON RT.RESTAURANT_ID = R.RESTAURANT_ID
WHERE R.CUISINE = "ITALIAN"
);


-- List restaurants (Name) that have received ratings from consumers older than 30.
SELECT DISTINCT R.NAME,C.AGE
FROM RESTAURANTS R
JOIN RATINGS RT ON R.RESTAURANT_ID= RT.RESTAURANT_ID
JOIN CONSUMERS C ON RT.CONSUMER_ID = C.CONSUMER_ID
WHERE C.AGE > 30;


-- Find the Consumer_ID and Occupation of consumers whose preferred cuisine is 'Mexican' and who have given an Overall_Rating of 0 to at least one restaurant (any restaurant).
SELECT DISTINCT C.CONSUMER_ID,C.OCCUPATION,C.CITY,RT.OVERALL_RATING
FROM CONSUMERS C
JOIN CONSUMER_PREFERENCES CP ON C.CONSUMER_ID = CP.CONSUMER_ID
JOIN RATINGS RT ON C.CONSUMER_ID = RT.CONSUMER_ID
WHERE CP.PREFERRED_CUISINE = "MEXICAN" AND RT.OVERALL_RATING = 0;



-- List the names and cities of restaurants that serve 'Pizzeria' cuisine and are located in a city where at least one 'Student' consumer lives.
SELECT N.NAME, N.CITY,RC.CUISINE 
FROM RESTAURANTS N 
JOIN RESTAURANT_CUISINES RC ON N.RESTAURANT_ID = RC.RESTAURANT_ID
JOIN CONSUMERS C ON N.CITY = C.CITY
WHERE RC.CUISINE = "PIZZERIA"
AND C.OCCUPATION = "STUDENT";


-- Find consumers (Consumer_ID, Age) who are 'Social Drinkers' and have rated a restaurant that has 'No' parking.
SELECT C.CONSUMER_ID,C.AGE
FROM CONSUMERS C
JOIN RATINGS R ON C.CONSUMER_ID = R.CONSUMER_ID
JOIN RESTAURANTS RE ON R.RESTAURANT_ID = RE.RESTAURANT_ID
WHERE C.DRINK_LEVEL = "SOCIAL  DRINKERS" AND RE.PARKING="NONE";


-- Questions Emphasizing WHERE Clause and Order of Execution

-- 16 List Consumer_IDs and the count of restaurants they've rated, but only for consumers who are 'Students'. Show only students who have rated more than 2 restaurants.

SELECT C.CONSUMER_ID,c.occupation, COUNT(R.RESTAURANT_ID) AS RESTAURANT_COUNT
FROM CONSUMERS C
JOIN RATINGS R ON C.CONSUMER_ID = R.CONSUMER_ID
WHERE C.OCCUPATION = "STUDENT"
GROUP BY C.CONSUMER_ID
HAVING COUNT(R.RESTAURANT_ID) > 2;


-- 17 We want to categorize consumers by an 'Engagement_Score' which is their Age divided by 10 (integer division). List the Consumer_ID, Age, and 
-- this calculated Engagement_Score, but only for consumers whose Engagement_Score would be exactly 2 and who use 'Public' 
SELECT C.CONSUMER_ID,C.AGE /10,C.TRANSPORTATION_METHOD AS ENGAGEMENT_SCORE
FROM CONSUMERS C
WHERE (C.AGE/10) = 2
AND C.TRANSPORTATION_METHOD = "PUBLIC";


-- 18 For each restaurant, calculate its average Overall_Rating. Then, list the restaurant Name, City, and its calculated average Overall_Rating, but only for restaurants located in 'Cuernavaca' AND whose calculated average Overall_Rating is greater than 1.0.
SELECT R.NAME,R.CITY ,AVG(RT.OVERALL_RATING) AS AVERAGE_OVERALL_RATING
FROM RESTAURANTS R 
JOIN RATINGS RT ON R.RESTAURANT_ID = RT.RESTAURANT_ID
WHERE R.CITY = "CUERNAVACA"
GROUP BY R.RESTAURANT_ID,R.NAME,R.CITY
HAVING AVG(RT.OVERALL_RATING) > 1.0;

-- 19 Find consumers (Consumer_ID, Age) who are 'Married' and whose Food_Rating for any restaurant is equal to their Service_Rating for that same restaurant, but only consider ratings where the Overall_Rating was 2.
SELECT C.CONSUMER_ID ,C.AGE,C.MARITAL_STATUS,RT.OVERALL_RATING 
FROM CONSUMERS c
JOIN RATINGS RT ON C.CONSUMER_ID = RT.CONSUMER_ID
WHERE C.MARITAL_STATUS = "MARRIED"
AND RT.OVERALL_RATING = 2
AND RT.FOOD_RATING = RT.SERVICE_RATING;


--  5 List Consumer_ID, Age, and the Name of any restaurant they rated, but only for consumers who are 'Employed' and have given a Food_Rating of 0 to at 
-- least one restaurant located in 'Ciudad Victoria'

SELECT C.CONSUMER_ID ,C.AGE
FROM CONSUMERS C
JOIN RATINGS RT ON C.CONSUMER_ID = RT.RESTAURANT_ID
JOIN RESTAURANTS R ON RT.RESTAURANT_ID = R.RESTAURANT_ID
WHERE C.OCCUPATION="EMPLOYED"
AND R.CITY = " CIUDAD VICTORIA"
AND FOOD_RATING=0;


-- Advanced SQL Concepts: Derived Tables, CTEs, Window Functions, Views, Stored Procedures

-- Using a CTE, find all consumers who live in 'San Luis Potosi'. Then, list their Consumer_ID, Age, and the Name of any Mexican restaurant
--  they have rated with an Overall_Rating of 2.
WITH SANLUISCONSUMERS AS (
    SELECT CONSUMER_ID, AGE
    FROM CONSUMERS
    WHERE CITY = 'San Luis Potosi'
)
SELECT SLC.CONSUMER_ID, SLC.AGE, R.NAME
FROM SANLUISCONSUMERS SLC
JOIN RATINGS RAT ON SLC.CONSUMER_ID = RAT.CONSUMER_ID
JOIN RESTAURANTS R ON RAT.RESTAURANT_ID = R.RESTAURANT_ID
JOIN RESTAURANT_CUISINES RC ON R.RESTAURANT_ID = RC.RESTAURANT_ID
WHERE RC.CUISINE = 'Mexican'
AND RAT.OVERALL_RATING = 2;

-- For each Occupation, find the average age of consumers. Only consider consumers who have made at least one rating. (Use a derived table to get consumers who have rated).
SELECT C.OCCUPATION,AVG(C.AGE) AS AVGERAGE_AGE
FROM (
SELECT DISTINCT CONSUMER_ID
FROM RATINGS
) RATED_CONSUMERS
JOIN CONSUMERS C ON RATED_CONSUMERS.CONSUMER_ID = c.CONSUMER_ID
GROUP BY C.OCCUPATION;
 

-- 3 Using a CTE to get all ratings for restaurants in 'Cuernavaca', rank these ratings within each restaurant based on Overall_Rating 
-- (highest first). Display Restaurant_ID, Consumer_ID, Overall_Rating, and the RatingRank.
WITH CUERNAVACARATINGS AS (
    SELECT RT.RESTAURANT_ID, RT.Consumer_ID, RT.Overall_Rating
    FROM RATINGS RT
    JOIN RESTAURANTS R ON RT.RESTAURANT_ID = R.RESTAURANT_ID
    WHERE R.CITY= 'CUERNAVACA'
)
SELECT 
    RESTAURANT_ID,
    CONSUMER_ID,
    OVERALL_RATING,
    RANK() OVER (PARTITION BY RESTAURANT_ID ORDER BY OVERALL_RATING DESC) AS RATINGRANK
FROM CUERNAVACARATINGS;

-- 4 For each rating, show the Consumer_ID, Restaurant_ID, Overall_Rating, and also display the average Overall_Rating given by that specific consumer across all their ratings.alter
SELECT CONSUMER_ID,RESTAURANT_ID,OVERALL_RATING,
AVG(OVERALL_RATING) OVER (PARTITION BY CONSUMER_ID) AS AVG_CONSUMER_RATING
FROM RATINGS;

-- 5.Using a CTE, identify students who have a 'Low' budget. Then, for each of these students, 
-- list their top 3 most preferred cuisines based on the order they appear in the Consumer_Preferences table 
-- (assuming no explicit preference order, use Consumer_ID, Preferred_Cuisine to define order for ROW_NUMBER).
WITH LOWBUDGETSTUDENTS AS (
    SELECT CONSUMER_ID
    FROM CONSUMERS
    WHERE OCCUPATION = 'STUDENT' AND BUDGET = 'LOW'
)
SELECT 
    LBS.CONSUMER_ID,
    CP.PREFERRED_CUISINE
FROM LOWBUDGETSTUDENTS LBS
JOIN CONSUMER_PREFERENCES CP ON LBS.CONSUMER_ID = CP.CONSUMER_ID
WHERE (
    SELECT COUNT(*) 
    FROM CONSUMER_PREFERENCES CP2 
    WHERE CP2.CONSUMER_ID = CP.CONSUMER_ID 
    AND CP2.PREFERRED_CUISINE <= CP.PREFERRED_CUISINE
) <= 3
ORDER BY LBS.CONSUMER_ID, CP.PREFERRED_CUISINE;

-- 6.Consider all ratings made by 'Consumer_ID' = 'U1008'. For each rating, show the Restaurant_ID, Overall_Rating,
-- and the Overall_Rating of the next restaurant they rated (if any), ordered by Restaurant_ID 

SELECT R.RESTAURANT_ID,R.OVERALL_RATING,
LEAD(R.OVERALL_RATING) OVER (ORDER BY R.RESTAURANT_ID) AS NEXT_OVERALL_RATING    -- Uses the LEAD window function to retrieve the OVERALL_RATING of the next restaurant.
FROM (
    SELECT RESTAURANT_ID, OVERALL_RATING
    FROM RATINGS
    WHERE CONSUMER_ID = 'U1008'
) 
ORDER BY R.RESTAURANT_ID;

-- 7.Create a VIEW named HighlyRatedMexicanRestaurants that shows the Restaurant_ID,
-- Name, and City of all Mexican restaurants that have an average Overall_Rating greater than 1.5.
CREATE VIEW HIGHLYRATEDMEXICANRESTAURANTS AS
SELECT R.RESTAURANT_ID,R.NAME,R.CITY
FROM RESTAURANTS R
JOIN RESTAURANT_CUISINES RC ON R.RESTAURANT_ID = RC.RESTAURANT_ID
JOIN RATINGS RT ON R.RESTAURANT_ID = RT.RESTAURANT_ID
WHERE RC.CUISINE = 'MEXICAN'
GROUP BY R.RESTAURANT_ID, R.NAME, R.CITY
HAVING AVG(RT.OVERALL_RATING) > 1.5;

-- 8.First, ensure the HighlyRatedMexicanRestaurants view from Q7 exists. Then, using a CTE to 
-- find consumers who prefer 'Mexican' cuisine, list those consumers (Consumer_ID)
-- who have not rated any restaurant listed in the HighlyRatedMexicanRestaurants view.
WITH MEXICANCUISINELOVERS AS (
    SELECT DISTINCT CONSUMER_ID,PREFERRED_CUISINE
    FROM CONSUMER_PREFERENCES
    WHERE PREFERRED_CUISINE = 'MEXICAN'
)
SELECT MCL.CONSUMER_ID
FROM MEXICANCUISINELOVERS MCL
WHERE NOT EXISTS (
    SELECT 1
    FROM RATINGS RT
    JOIN HIGHLYRATEDMEXICANRESTAURANTS HRMR ON RT.RESTAURANT_ID = HRMR.RESTAURANT_ID
    WHERE RT.CONSUMER_ID = MCL.CONSUMER_ID
)
ORDER BY MCL.CONSUMER_ID;


-- 9 Create a stored procedure GetRestaurantRatingsAboveThreshold that accepts a Restaurant_ID and a minimum Overall_Rating as input. It should return the Consumer_ID, Overall_Rating, Food_Rating, and Service_Rating for that restaurant where the Overall_Rating meets 
 -- or exceeds the threshold.
DELIMITER //

CREATE PROCEDURE GETRESTAURANTRATINGSABOVETHRESHOLD (
    IN P_RESTAURANT_ID INT,
    IN P_MIN_OVERALL_RATING INT
)
BEGIN
    SELECT CONSUMER_ID, OVERALL_RATING, FOOD_RATING, SERVICE_RATING
    FROM RATINGS
    WHERE RESTAURANT_ID = P_RESTAURANT_ID
    AND OVERALL_RATING >= P_MIN_OVERALL_RATING;
END //

DELIMITER ;


-- 10 Identify the top 2 highest-rated (by Overall_Rating) restaurants for each cuisine type. If there are ties in rating,
--  include all tied restaurants. Display Cuisine, Restaurant_Name, City, and Overall_Rating.
WITH RESTAURANTAVGRATINGS AS (
SELECT RC.CUISINE, R.RESTAURANT_ID, R.NAME AS RESTAURANT_NAME, R.CITY,
 AVG(RAT.OVERALL_RATING) AS AVG_OVERALL_RATING
FROM RESTAURANTS R
JOIN RESTAURANT_CUISINES RC ON R.RESTAURANT_ID = RC.RESTAURANT_ID
JOIN RATINGS RAT ON R.RESTAURANT_ID = RAT.RESTAURANT_ID
GROUP BY RC.CUISINE, R.RESTAURANT_ID, R.NAME, R.CITY
),
RANKEDRESTAURANTS AS (
SELECT CUISINE, RESTAURANT_NAME, CITY, AVG_OVERALL_RATING,
DENSE_RANK() OVER (PARTITION BY CUISINE 
ORDER BY AVG_OVERALL_RATING DESC) AS RATING_RANK
FROM RESTAURANTAVGRATINGS
)
SELECT CUISINE, RESTAURANT_NAME, CITY, AVG_OVERALL_RATING
FROM RANKEDRESTAURANTS
WHERE RATING_RANK <= 2;



-- 11 First, create a VIEW named ConsumerAverageRatings that lists Consumer_ID and their average Overall_Rating. Then, using this view and a CTE, find the top 5 consumers by their average overall rating. 
-- For these top 5 consumers, list their Consumer_ID, their average rating, and the number of 'Mexican' restaurants they have rated.
-- First, create the VIEW
CREATE VIEW CONSUMERAVERAGERATINGS AS
SELECT CONSUMER_ID, AVG(OVERALL_RATING) AS AVERAGE_RATING
FROM RATINGS
GROUP BY CONSUMER_ID;

-- THEN, THE QUERY USING THE VIEW AND A CTE
WITH TOPCONSUMERS AS (
    SELECT CONSUMER_ID, AVERAGE_RATING
    FROM CONSUMERAVERAGERATINGS
    ORDER BY AVERAGE_RATING DESC
    LIMIT 5
)
SELECT 
    TC.CONSUMER_ID,
    TC.AVERAGE_RATING,
    (SELECT COUNT(DISTINCT R.RESTAURANT_ID)
     FROM RATINGS R
     JOIN RESTAURANT_CUISINES RC ON R.RESTAURANT_ID = RC.RESTAURANT_ID
     WHERE R.CONSUMER_ID = TC.CONSUMER_ID AND RC.CUISINE = 'MEXICAN') AS MEXICAN_RESTAURANTS_RATED
FROM TOPCONSUMERS TC;

-- 12 Create a stored procedure named GetConsumerSegmentAndRestaurantPerformance that accepts a Consumer_ID as input
CREATE VIEW CONSUMERAVERAGERATINGS AS
SELECT CONSUMER_ID, AVG(OVERALL_RATING) AS AVERAGE_RATING
FROM RATINGS
GROUP BY CONSUMER_ID;

-- THEN, THE QUERY USING THE VIEW AND A CTE
WITH TOPCONSUMERS AS (
    SELECT CONSUMER_ID, AVERAGE_RATING
    FROM CONSUMERAVERAGERATINGS
    ORDER BY AVERAGE_RATING DESC
    LIMIT 5
)
SELECT 
    TC.CONSUMER_ID,
    TC.AVERAGE_RATING,
    (SELECT COUNT(DISTINCT R.RESTAURANT_ID)
     FROM RATINGS R
     JOIN RESTAURANT_CUISINES RC ON R.RESTAURANT_ID = RC.RESTAURANT_ID
     WHERE R.CONSUMER_ID = TC.CONSUMER_ID AND RC.CUISINE = 'MEXICAN') AS MEXICAN_RESTAURANTS_RATED
FROM TOPCONSUMERS TC;

-- CREATE A STORED PROCEDURE NAMED GETCONSUMERSEGMENTANDRESTAURANTPERFORMANCE THAT ACCEPTS A CONSUMER_ID AS INPUT
DELIMITER //

CREATE PROCEDURE GETCONSUMERSEGMENTANDRESTAURANTPERFORMANCE (IN CONSUMER_ID VARCHAR(255))
BEGIN
    DECLARE SPENDING_SEGMENT VARCHAR(50);

    SELECT 
        CASE 
            WHEN BUDGET = 'LOW' THEN 'BUDGET CONSCIOUS'
            WHEN BUDGET = 'MEDIUM' THEN 'MODERATE SPENDER'
            WHEN BUDGET = 'HIGH' THEN 'PREMIUM SPENDER'
            ELSE 'UNKNOWN BUDGET'
        END INTO SPENDING_SEGMENT
    FROM USERPROFILE
    WHERE USERID = CONSUMER_ID;

    SELECT SPENDING_SEGMENT AS SPENDING_SEGMENT;

    SELECT 
        RES.NAME AS RESTAURANT_NAME,
        RAT.RATING AS OVERALL_RATING,
        (SELECT AVG(RATING) FROM RATING WHERE PLACEID = RAT.PLACEID) AS AVERAGE_OVERALL_RATING,
        CASE 
            WHEN RAT.RATING > (SELECT AVG(RATING) FROM RATING WHERE PLACEID = RAT.PLACEID) THEN 'ABOVE AVERAGE'
            WHEN RAT.RATING = (SELECT AVG(RATING) FROM RATING WHERE PLACEID = RAT.PLACEID) THEN 'AT AVERAGE'
            ELSE 'BELOW AVERAGE'
        END AS PERFORMANCE_FLAG,
        RANK() OVER (ORDER BY RAT.RATING DESC) AS `RANK`
    FROM RATING RAT
    JOIN GEOPLACES2 RES ON RAT.PLACEID = RES.PLACEID
    WHERE RAT.USERID = CONSUMER_ID
    ORDER BY `RANK`;
END //

DELIMITER ;



